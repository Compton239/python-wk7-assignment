import requests
import os
from urllib.parse import urlparse
import hashlib

def get_filename_from_url(url: str) -> str:
    """Extract filename from URL or generate a unique one."""
    parsed_url = urlparse(url)
    filename = os.path.basename(parsed_url.path)
    
    if not filename:  # No filename in URL
        # Generate one based on URL hash
        filename = hashlib.md5(url.encode()).hexdigest()[:8] + ".jpg"
    
    return filename

def download_image(url: str, directory: str = "Fetched_Images"):
    """Download a single image from URL into Fetched_Images folder."""
    try:
        # Ensure directory exists
        os.makedirs(directory, exist_ok=True)

        # Fetch image
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # Raise error for bad HTTP codes

        # Respect: check content type
        content_type = response.headers.get("Content-Type", "")
        if not content_type.startswith("image/"):
            print(f"✗ Skipping: {url} (Not an image)")
            return

        # Extract filename
        filename = get_filename_from_url(url)
        filepath = os.path.join(directory, filename)

        # Avoid duplicates
        if os.path.exists(filepath):
            print(f"⚠ Duplicate skipped: {filename}")
            return

        # Save file
        with open(filepath, "wb") as f:
            f.write(response.content)

        print(f"✓ Successfully fetched: {filename}")
        print(f"✓ Image saved to {filepath}")

    except requests.exceptions.RequestException as e:
        print(f"✗ Connection error while fetching {url}: {e}")
    except Exception as e:
        print(f"✗ Unexpected error with {url}: {e}")

def main():
    print("Welcome to the Ubuntu Image Fetcher")
    print("A tool for mindfully collecting images from the web\n")

    # Ask user for single or multiple URLs
    urls = input("Please enter image URL(s), separated by spaces: ").split()

    for url in urls:
        download_image(url)

    print("\nConnection strengthened. Community enriched.")

if __name__ == "__main__":
    main()
